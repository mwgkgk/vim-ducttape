Execute perl (setup):
  use strict;
  use warnings;
  require VIMx;
  require VIMx::Tie::BufferVars;

Before:
  unlet! b:eep b:var b:var_exists b:oop
  let b:oop = 'Dashie'
  let b:ours = bufnr('')
  perl tie our %vars, 'VIMx::Tie::BufferVars', $b{ours}

Execute perl (EXISTS):
  $b{var_exists} = exists $vars{oop}

Then (EXISTS):
  Assert b:var_exists

Execute perl (not EXISTS):
  $b{var_exists} = exists $vars{eep}

Then (not EXISTS):
  Assert !b:var_exists

Execute perl (FETCH):
  $b{var} = $vars{oop}

Then (FETCH):
  AssertEqual b:var, 'Dashie'

Execute perl (FETCH dne):
  $b{var} = not defined $vars{eep}

Then (FETCH dne):
  Assert b:var

Execute perl (STORE):
  $b{var} = $vars{eep} = 'Rainbow Dash'

Then (STORE):
  AssertEqual b:var, 'Rainbow Dash'
  AssertEqual b:eep, 'Rainbow Dash'

Execute perl (KEYS):
  $b{oop} = [ sort keys %vars ]

Then (KEYS):
  AssertEqual sort(keys(b:)), b:oop

Execute perl:
  $b{eep} = scalar %vars;

Then (SCALAR):
  " -1 as we're creating a new entry with the assignment to $b{eep}
  AssertEqual len(keys(b:))-1, b:eep

" __END__
