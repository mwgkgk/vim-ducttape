Execute (setup):
  perl use VIMx; use strict; use warnings;

Before:
  unlet! b:eep b:oop b:ours b:isa b:our_name
  let b:eep      = 'Rainbow Dash'
  let b:ours     = bufnr('')
  let b:our_name = bufname('')

Given (mane six):
  Twilight Sparkle
  Rainbow Dash
  Applejack
  Fluttershy
  Rarity
  Pinkie Pie

Execute perl (%BUFFERS isa):
  $b{oop} = ref tied(%BUFFERS)

Then (%BUFFERS isa):
  AssertEqual b:oop, 'VIMx::Tie::Buffers'

Execute perl (EXISTS - bufnr):
  $b{oop} = exists $BUFFERS{0+$BUFFER}

Then (EXISTS - bufnr):
  Assert b:oop

Execute perl (FETCH by nr isa):
  $b{oop} = ref $BUFFERS{0+$BUFFER}

Then (FETCH by nr isa):
  AssertEqual b:oop, 'VIMx::AutoLoadFor::Tie'

Execute perl (FETCH by nr tied isa):
  $b{oop} = ref tied @{ $BUFFERS{0+$BUFFER} }

Then (FETCH by nr tied):
  AssertEqual 'VIMx::Tie::Buffer', b:oop

Execute(KEYS spew):
  perl $b{oop} = [ keys %BUFFERS ]
  Log b:oop

Execute perl (EXISTS - bufname):
  $b{oop} = exists $BUFFERS{"$BUFFER"} ? 1 : 0

Then (EXISTS - bufname):
  Assert bufexists(bufname('')), 'buffer exists'
  Assert buflisted(bufname('')), 'buffer is listed'
  Assert bufloaded(bufname('')), 'buffer is loaded'
  Assert b:oop, 'tied %BUFFERS found ' . bufname('')

Execute perl (not EXISTS - bufname):
  $b{oop} = exists $BUFFERS{'la la la la la BUFNAME OF DOOM'} ? 0 : 1

Then (not EXISTS - bufname):
  Assert b:oop

Execute perl (trivial get of a buffer line):
  $b{oop} = $BUFFERS{0+$BUFFER}->[1]

Then (trivial get of a buffer line):
  AssertEqual b:oop, 'Rainbow Dash'

Execute perl (vars - values are VIMx::AutoLoadFor::Tie):
  $b{oop} = ref $BUFFERS{0+$BUFFER}

Then (vars - values are VIMx::AutoLoadFor::Tie):
  AssertEqual b:oop, 'VIMx::AutoLoadFor::Tie'

Execute perl (vars - values are tied ::Buffer):
  $b{oop} = ref tied(@{ $BUFFERS{0+$BUFFER} })

Then (vars - values are tied ::Buffer):
  AssertEqual b:oop, 'VIMx::Tie::Buffer'

Execute perl (vars - isa ::BufferVars):
  $b{oop} = ref tied(%{ $BUFFERS{0+$BUFFER}->vars })

Then (vars - isa ::BufferVars):
  AssertEqual b:oop, 'VIMx::Tie::BufferVars'

Execute perl (vars - get):
  $b{oop} = $BUFFERS{0+$BUFFER}->vars->{eep}

Then (vars - get):
  AssertEqual b:oop, b:eep

Execute perl (vars - set):
  $BUFFERS{0+$BUFFER}->vars->{oop} = $b{eep}

Then (vars - set):
  AssertEqual b:oop, b:eep

Execute perl ($BUFFER->options isa BufferVars):
  $b{oop} = ref tied(%{ $BUFFER->options });

Then:
  AssertEqual b:oop, 'VIMx::Tie::Options', 'tied class correct'

Execute perl ($BUFFER->options prefix correct):
  $b{oop} = tied(%{ $BUFFER->options })->{thing};

Then:
  AssertEqual b:oop, '&', 'prefix correct (&)'

Execute perl (options - values are tied ::BufferVars):
  $b{oop} = ref tied(%{ $BUFFERS{0+$BUFFER}->options })

Then (options - values are tied ::BufferVars):
  AssertEqual b:oop, 'VIMx::Tie::BufferVars'

Given ponyville (one pony):
  Rainbow Dash

Execute (options - get):
  if !has('patch-7.4.2273') | call vader#log('SKIPPING: We need at least v7.4.2273 for buffer option getting/setting to work') | finish | endif
  perl $b{oop} = $BUFFERS{0+$BUFFER}->options->{filetype}
  AssertEqual b:oop, 'ponyville'

Execute (options - set):
  if !has('patch-7.4.2273') | call vader#log('SKIPPING: We need at least v7.4.2273 for buffer option getting/setting to work') | finish | endif
  perl $b{oop} = $BUFFERS{0+$BUFFER}->options->{filetype} = 'manehattan'
  AssertEqual b:oop, 'manehattan', 'tied Perl return correct'
  AssertEqual &filetype, 'manehattan', '...and matches &filetype'

" Execute (vars - set):
"   let b:eep = 'Rainbow Dash'
"   perl $BUFFERS{0+$BUFFER}->vars->{oop} = $b{eep}
"   AssertEqual b:oop, b:eep

" __END__
