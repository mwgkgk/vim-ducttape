Execute (setup):
  perl use VIMx; use VIMx::Util;

Before:
  unlet! b:eep b:eep2 b:oop b:dict

Execute (vim_do):
  perl vim_do("let b:eep = 'eeeyup!'")
  AssertEqual b:eep, 'eeeyup!'

Execute (vim_eval - scalar):
  perl $b{eep} = vim_eval(1)
  AssertEqual b:eep, 1

Execute (vim_eval - function):
  perl $b{eep} = vim_eval("[ 1, 2 ]")
  AssertEqual b:eep, [ 1, 2 ]

Execute (vim_typeof - number):
  let b:eep = 1
  perl $b{oop} = vim_typeof(1)
  AssertEqual b:oop, 'number'

Execute (vim_typeof - string):
  let b:eep = 1
  perl $b{oop} = vim_typeof("'hiya'")
  AssertEqual b:oop, 'string'

Execute (vim_typeof - dict):
  let b:eep = 1
  perl $b{oop} = vim_typeof("{'one': 1}")
  AssertEqual b:oop, 'dict'

Execute (vim_typeof - list):
  let b:eep = 1
  perl $b{oop} = vim_typeof("[1, 2, 3]")
  AssertEqual b:oop, 'list'

" Execute (vim_escape):
"   " perl let $b{eep} = \( "'"vim_escape("one two 'three 'four'' five") )
"   perl VIM::DoCommand(q{let b:eep = '} . vim_escape("one two 'three 'four'' five") . q{'})
"   AssertEqual b:eep, "one two 'three 'four'' five"
